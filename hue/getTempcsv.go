package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"
)

type AutoGenerated struct {
	Num1 struct {
		State struct {
			Daylight    interface{} `json:"daylight"`
			Lastupdated string      `json:"lastupdated"`
		} `json:"state"`
		Config struct {
			On            bool `json:"on"`
			Configured    bool `json:"configured"`
			Sunriseoffset int  `json:"sunriseoffset"`
			Sunsetoffset  int  `json:"sunsetoffset"`
		} `json:"config"`
		Name             string `json:"name"`
		Type             string `json:"type"`
		Modelid          string `json:"modelid"`
		Manufacturername string `json:"manufacturername"`
		Swversion        string `json:"swversion"`
	} `json:"1"`
	Num2 struct {
		State struct {
			Flag        bool   `json:"flag"`
			Lastupdated string `json:"lastupdated"`
		} `json:"state"`
		Config struct {
			On        bool `json:"on"`
			Reachable bool `json:"reachable"`
		} `json:"config"`
		Name             string `json:"name"`
		Type             string `json:"type"`
		Modelid          string `json:"modelid"`
		Manufacturername string `json:"manufacturername"`
		Swversion        string `json:"swversion"`
		Uniqueid         string `json:"uniqueid"`
		Recycle          bool   `json:"recycle"`
	} `json:"2"`
	Num3 struct {
		State struct {
			Temperature int    `json:"temperature"`
			Lastupdated string `json:"lastupdated"`
		} `json:"state"`
		Config struct {
			On            bool          `json:"on"`
			Battery       int           `json:"battery"`
			Reachable     bool          `json:"reachable"`
			Alert         string        `json:"alert"`
			Ledindication bool          `json:"ledindication"`
			Usertest      bool          `json:"usertest"`
			Pending       []interface{} `json:"pending"`
		} `json:"config"`
		Name             string `json:"name"`
		Type             string `json:"type"`
		Modelid          string `json:"modelid"`
		Manufacturername string `json:"manufacturername"`
		Swversion        string `json:"swversion"`
		Uniqueid         string `json:"uniqueid"`
	} `json:"3"`
	Num4 struct {
		State struct {
			Presence    bool   `json:"presence"`
			Lastupdated string `json:"lastupdated"`
		} `json:"state"`
		Config struct {
			On             bool          `json:"on"`
			Battery        int           `json:"battery"`
			Reachable      bool          `json:"reachable"`
			Alert          string        `json:"alert"`
			Ledindication  bool          `json:"ledindication"`
			Usertest       bool          `json:"usertest"`
			Sensitivity    int           `json:"sensitivity"`
			Sensitivitymax int           `json:"sensitivitymax"`
			Pending        []interface{} `json:"pending"`
		} `json:"config"`
		Name             string `json:"name"`
		Type             string `json:"type"`
		Modelid          string `json:"modelid"`
		Manufacturername string `json:"manufacturername"`
		Swversion        string `json:"swversion"`
		Uniqueid         string `json:"uniqueid"`
	} `json:"4"`
	Num5 struct {
		State struct {
			Lightlevel  int    `json:"lightlevel"`
			Dark        bool   `json:"dark"`
			Daylight    bool   `json:"daylight"`
			Lastupdated string `json:"lastupdated"`
		} `json:"state"`
		Config struct {
			On            bool          `json:"on"`
			Battery       int           `json:"battery"`
			Reachable     bool          `json:"reachable"`
			Alert         string        `json:"alert"`
			Tholddark     int           `json:"tholddark"`
			Tholdoffset   int           `json:"tholdoffset"`
			Ledindication bool          `json:"ledindication"`
			Usertest      bool          `json:"usertest"`
			Pending       []interface{} `json:"pending"`
		} `json:"config"`
		Name             string `json:"name"`
		Type             string `json:"type"`
		Modelid          string `json:"modelid"`
		Manufacturername string `json:"manufacturername"`
		Swversion        string `json:"swversion"`
		Uniqueid         string `json:"uniqueid"`
	} `json:"5"`
	Num6 struct {
		State struct {
			Status      int    `json:"status"`
			Lastupdated string `json:"lastupdated"`
		} `json:"state"`
		Config struct {
			On        bool `json:"on"`
			Reachable bool `json:"reachable"`
		} `json:"config"`
		Name             string `json:"name"`
		Type             string `json:"type"`
		Modelid          string `json:"modelid"`
		Manufacturername string `json:"manufacturername"`
		Swversion        string `json:"swversion"`
		Uniqueid         string `json:"uniqueid"`
		Recycle          bool   `json:"recycle"`
	} `json:"6"`
}

func main() {
	file, err := os.OpenFile("temp.csv", os.O_APPEND|os.O_WRONLY, 0600)
	checkError("Cannot create file", err)
	defer file.Close()

	writer := csv.NewWriter(file)

	for {

		temp := getTemp()

		var jsono AutoGenerated
		json.Unmarshal([]byte(temp), &jsono)
		fmt.Printf("Results: %#v\n", jsono.Num3.State.Temperature)

		var value = []string{jsono.Num3.State.Lastupdated, strconv.Itoa(jsono.Num3.State.Temperature)}
		fmt.Println("Writing to csv:", value)
		err := writer.Write(value)
		checkError("Cannot write to file", err)

		//Sleep for 60 sec
		time.Sleep(time.Second * 60)

		writer.Flush()
	}

	//defer writer.Flush()
}

func getTemp() string {
	url := ""
	req, err := http.NewRequest("GET", url, nil)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	return string(body)
}

func checkError(message string, err error) {
	if err != nil {
		log.Fatal(message, err)
	}
}
